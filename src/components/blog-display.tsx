'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { useToast } from "@/hooks/use-toast"
import { Copy, Share2, Download, ThumbsUp, ThumbsDown, Send } from 'lucide-react';

interface BlogDisplayProps {
  htmlContent: string;
  onFeedback: (rating: 'up' | 'down') => void;
}

export function BlogDisplay({ htmlContent, onFeedback }: BlogDisplayProps) {
    const { toast } = useToast();
    const [feedbackGiven, setFeedbackGiven] = useState<'up' | 'down' | null>(null);

    const handleCopy = () => {
        navigator.clipboard.writeText(htmlContent);
        toast({
            title: "Copied!",
            description: "Blog post HTML has been copied to your clipboard.",
        });
    };

    const handleShare = async () => {
        if(navigator.share) {
            try {
                await navigator.share({
                    title: 'Check out this blog post!',
                    text: 'Generated by Blogenius',
                    // You can't directly share HTML, so we might share a link or plain text.
                    // For now, a simple text share is sufficient.
                });
            } catch (error) {
                console.error('Error sharing:', error);
                toast({
                    variant: 'destructive',
                    title: 'Sharing failed',
                    description: 'Could not share the post at this time.'
                });
            }
        } else {
            toast({
                title: 'Share not supported',
                description: 'Your browser does not support the Web Share API.'
            });
        }
    };

    const handleDownload = () => {
        const blob = new Blob([htmlContent], { type: 'text/html' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'blog-post.html';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        toast({
            title: 'Download Started',
            description: 'Your blog post is being downloaded.',
        });
    };
    
    const handlePublish = () => {
        toast({
            title: "Integration Coming Soon!",
            description: "Direct WordPress publishing is on its way. For now, you can copy the HTML.",
        });
    }

    const handleFeedbackClick = (rating: 'up' | 'down') => {
        if (feedbackGiven) return;
        setFeedbackGiven(rating);
        onFeedback(rating);
    };

  return (
    <div className="flex flex-col h-full">
        <div className="flex-shrink-0 p-4 border-b flex items-center justify-between gap-2 bg-card rounded-t-lg">
            <p className="text-sm font-medium">Generated Post</p>
            <div className="flex items-center gap-1">
                <Button variant="ghost" size="icon" onClick={handleCopy} aria-label="Copy HTML"><Copy className="h-4 w-4" /></Button>
                <Button variant="ghost" size="icon" onClick={handleShare} aria-label="Share post"><Share2 className="h-4 w-4" /></Button>
                <Button variant="ghost" size="icon" onClick={handleDownload} aria-label="Download HTML"><Download className="h-4 w-4" /></Button>
                <Button variant="outline" size="sm" onClick={handlePublish} className="ml-2">
                    <Send className="h-4 w-4 mr-2"/>
                    Publish
                </Button>
            </div>
        </div>
        <ScrollArea className="flex-grow">
            <div
            className="p-6 prose-styles"
            dangerouslySetInnerHTML={{ __html: htmlContent }}
            />
        </ScrollArea>
        <Separator />
        <div className="flex-shrink-0 p-4 flex items-center justify-center gap-4 bg-card rounded-b-lg">
            <p className="text-sm text-muted-foreground">Was this helpful?</p>
            <div className="flex gap-2">
                <Button 
                    variant={feedbackGiven === 'up' ? 'default' : 'outline'}
                    size="icon" 
                    onClick={() => handleFeedbackClick('up')}
                    disabled={!!feedbackGiven}
                    aria-label="Good response"
                    className="transition-transform duration-200 hover:scale-110 active:scale-100"
                >
                    <ThumbsUp className="h-4 w-4" />
                </Button>
                <Button
                    variant={feedbackGiven === 'down' ? 'destructive' : 'outline'}
                    size="icon"
                    onClick={() => handleFeedbackClick('down')}
                    disabled={!!feedbackGiven}
                    aria-label="Bad response"
                    className="transition-transform duration-200 hover:scale-110 active:scale-100"
                >
                    <ThumbsDown className="h-4 w-4" />
                </Button>
            </div>
        </div>
    </div>
  );
}
