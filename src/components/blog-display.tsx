'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { Textarea } from '@/components/ui/textarea';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useToast } from "@/hooks/use-toast";
import { Copy, Share2, Download, ThumbsUp, ThumbsDown, Send, ClipboardCopy, Loader2 } from 'lucide-react';
import Image from 'next/image';
import type { ImageDetails } from '@/ai/flows/generate-blog-images';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Skeleton } from './ui/skeleton';


interface BlogDisplayProps {
  htmlContent: string;
  images: ImageDetails[] | null; // Can be null if not requested, or empty array while loading
  isGeneratingImages: boolean;
  rawOutput: string;
  onFeedback: (rating: 'up' | 'down') => void;
}

export function BlogDisplay({ htmlContent, images, isGeneratingImages, rawOutput, onFeedback }: BlogDisplayProps) {
    const { toast } = useToast();
    const [feedbackGiven, setFeedbackGiven] = useState<'up' | 'down' | null>(null);

    const handleCopy = (text: string, type: string) => {
        navigator.clipboard.writeText(text);
        toast({
            title: "Copied!",
            description: `${type} has been copied to your clipboard.`,
        });
    };

    const handleShare = async () => {
        if(navigator.share) {
            try {
                await navigator.share({
                    title: 'Check out this blog post!',
                    text: 'Generated by Blogenius',
                });
            } catch (error) {
                console.error('Error sharing:', error);
                toast({
                    variant: 'destructive',
                    title: 'Sharing failed',
                    description: 'Could not share the post at this time.'
                });
            }
        } else {
            toast({
                title: 'Share not supported',
                description: 'Your browser does not support the Web Share API.'
            });
        }
    };

    const handleDownload = () => {
        const blob = new Blob([htmlContent], { type: 'text/html' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'blog-post.html';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        toast({
            title: 'Download Started',
            description: 'Your blog post is being downloaded.',
        });
    };
    
    const handlePublish = () => {
        toast({
            title: "Integration Coming Soon!",
            description: "Direct WordPress publishing is on its way. For now, you can copy the HTML.",
        });
    }

    const handleFeedbackClick = (rating: 'up' | 'down') => {
        if (feedbackGiven) return;
        setFeedbackGiven(rating);
        onFeedback(rating);
    };

  return (
    <div className="flex flex-col h-full">
        <Tabs defaultValue="preview" className="flex flex-col h-full">
            <div className="flex-shrink-0 p-4 border-b flex items-center justify-between gap-2 bg-card rounded-t-lg">
                <TabsList>
                    <TabsTrigger value="preview">Preview</TabsTrigger>
                    <TabsTrigger value="html">HTML</TabsTrigger>
                    {images !== null && <TabsTrigger value="images">Image Details</TabsTrigger>}
                    <TabsTrigger value="output">Output</TabsTrigger>
                </TabsList>
                <div className="flex items-center gap-1">
                    <Button variant="ghost" size="icon" onClick={() => handleCopy(htmlContent, 'HTML')} aria-label="Copy HTML"><Copy className="h-4 w-4" /></Button>
                    <Button variant="ghost" size="icon" onClick={handleShare} aria-label="Share post"><Share2 className="h-4 w-4" /></Button>
                    <Button variant="ghost" size="icon" onClick={handleDownload} aria-label="Download HTML"><Download className="h-4 w-4" /></Button>
                    <Button variant="outline" size="sm" onClick={handlePublish} className="ml-2">
                        <Send className="h-4 w-4 mr-2"/>
                        Publish
                    </Button>
                </div>
            </div>
            <TabsContent value="preview" className="flex-grow mt-0 data-[state=inactive]:hidden">
                <ScrollArea className="h-full">
                    <div className="p-6">
                        {isGeneratingImages && (
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                                <ImagePlaceholder />
                                <ImagePlaceholder />
                            </div>
                        )}
                        {images && images.length > 0 && (
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                                {images.map((img, index) => (
                                    <figure key={index}>
                                        <Image 
                                            src={img.url}
                                            alt={img.altText}
                                            title={img.title}
                                            width={600}
                                            height={400}
                                            className="rounded-lg object-cover w-full aspect-video"
                                            data-ai-hint="blog post illustration"
                                        />
                                        <figcaption className="text-sm text-center mt-2 text-muted-foreground italic">{img.caption}</figcaption>
                                    </figure>
                                ))}
                            </div>
                        )}
                        <div
                            className="prose-styles"
                            dangerouslySetInnerHTML={{ __html: htmlContent }}
                        />
                    </div>
                </ScrollArea>
            </TabsContent>
            <TabsContent value="html" className="flex-grow mt-0 data-[state=inactive]:hidden">
                <ScrollArea className="h-full">
                    <Textarea
                        className="p-6 font-code text-sm h-full w-full bg-muted border-0 rounded-none resize-none focus-visible:ring-0"
                        value={htmlContent}
                        readOnly
                    />
                </ScrollArea>
            </TabsContent>
             <TabsContent value="images" className="flex-grow mt-0 data-[state=inactive]:hidden">
                <ScrollArea className="h-full">
                    <div className="p-6 grid grid-cols-1 lg:grid-cols-2 gap-8">
                        {isGeneratingImages && <p>Generating image details...</p>}
                        {images && images.map((image, index) => (
                            <div key={index} className="space-y-4">
                                <h3 className="font-bold text-lg">Image {index + 1}</h3>
                                <Image 
                                    src={image.url}
                                    alt={image.altText}
                                    width={600}
                                    height={400}
                                    className="rounded-lg object-cover w-full aspect-video"
                                />
                                <MetadataField label="Alt Text" value={image.altText} onCopy={handleCopy} />
                                <MetadataField label="Title" value={image.title} onCopy={handleCopy} />
                                <MetadataField label="Caption" value={image.caption} onCopy={handleCopy} isTextarea />
                                <MetadataField label="Description" value={image.description} onCopy={handleCopy} isTextarea />
                            </div>
                        ))}
                    </div>
                </ScrollArea>
            </TabsContent>
            <TabsContent value="output" className="flex-grow mt-0 data-[state=inactive]:hidden">
                <ScrollArea className="h-full">
                    <Textarea
                        className="p-6 font-code text-sm h-full w-full bg-muted border-0 rounded-none resize-none focus-visible:ring-0"
                        value={rawOutput}
                        readOnly
                    />
                </ScrollArea>
            </TabsContent>
        </Tabs>
        <Separator />
        <div className="flex-shrink-0 p-4 flex items-center justify-center gap-4 bg-card rounded-b-lg">
            <p className="text-sm text-muted-foreground">Was this helpful?</p>
            <div className="flex gap-2">
                <Button 
                    variant={feedbackGiven === 'up' ? 'default' : 'outline'}
                    size="icon" 
                    onClick={() => handleFeedbackClick('up')}
                    disabled={!!feedbackGiven}
                    aria-label="Good response"
                    className="transition-transform duration-200 hover:scale-110 active:scale-100"
                >
                    <ThumbsUp className="h-4 w-4" />
                </Button>
                <Button
                    variant={feedbackGiven === 'down' ? 'destructive' : 'outline'}
                    size="icon"
                    onClick={() => handleFeedbackClick('down')}
                    disabled={!!feedbackGiven}
                    aria-label="Bad response"
                    className="transition-transform duration-200 hover:scale-110 active:scale-100"
                >
                    <ThumbsDown className="h-4 w-4" />
                </Button>
            </div>
        </div>
    </div>
  );
}

const ImagePlaceholder = () => (
    <div className="w-full aspect-video bg-muted rounded-lg flex flex-col items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin text-muted-foreground mb-2" />
        <p className="text-sm text-muted-foreground">Generating image...</p>
    </div>
)

interface MetadataFieldProps {
    label: string;
    value: string;
    onCopy: (value: string, type: string) => void;
    isTextarea?: boolean;
}

const MetadataField = ({ label, value, onCopy, isTextarea = false }: MetadataFieldProps) => (
    <div className="space-y-1">
        <Label className="text-sm font-medium">{label}</Label>
        <div className="relative">
            {isTextarea ? (
                <Textarea value={value} readOnly className="pr-10 bg-muted" rows={3} />
            ) : (
                <Input value={value} readOnly className="pr-10 bg-muted" />
            )}
            <Button 
                variant="ghost" 
                size="icon" 
                className="absolute right-1 top-1/2 -translate-y-1/2 h-7 w-7"
                onClick={() => onCopy(value, label)}
            >
                <ClipboardCopy className="h-4 w-4" />
            </Button>
        </div>
    </div>
);